#!/usr/bin/python

import argparse
import os
import subprocess
import sys
import tempfile
import yaml


def parse():
  # Taken verbatim from the real lava-dispatch to have the same CLI
  parser = argparse.ArgumentParser(description="lava-dispatch")
  parser.add_argument(
    "--config-dir",
    default=None,
    help="Configuration directory override (currently %(default)s")
  parser.add_argument(
      "--config",
      default=None,
      help="Custom config file")
  parser.add_argument(
    "--oob-fd",
    default=None,
    type=int,
    help="Used internally by LAVA scheduler.")
  parser.add_argument(
      "--output-dir",
      default=None,
      help="Directory to put structured output in.")
  parser.add_argument(
      "--validate", action='store_true',
      help="Just validate the job file, do not execute any steps.")
  parser.add_argument(
      "--job-id", action='store', default=None,
      help=("Set the scheduler job identifier. "
            "This alters process name for easier debugging"))
  parser.add_argument(
      "--socket-addr", default=None,
      help="Address of the ZMQ socket used to send the logs to the master")
  parser.add_argument(
      "job_file",
      metavar="JOB",
      help="Test scenario file")
  parser.add_argument(
      "--target",
      default=None,
      help="Run the job on a specific target device"
  )

  return parser.parse_args()


def main():
  args = parse()

  if args.job_file is None or args.job_id is None or args.socket_addr is None:
    sys.stderr.write("Missing job definition or id or socket address\n")
    return 1

  with open(args.job_file, "r") as job_in:
    job = yaml.load(job_in.read())

  # Create a temporary directory
  (fd, name) = tempfile.mkstemp()
  f_out = os.fdopen(fd, "w")
  f_out.write("job_id: %s\n" % args.job_id)
  f_out.write("log_uri: %s\n" % args.socket_addr)
  basedir = os.path.dirname(os.path.abspath(__file__))
  f_out.write("logfile: %s.yaml" % os.path.abspath(
    os.path.join(basedir, "..", "share", "lava", "logs", job["job_name"])))
  f_out.close()

  # Calling the DummySys
  try:
    subprocess.call(["DummySys", "--driver", "drivers.lava.dispatch", "--conf", name])
  except Exception:
    return 1
  finally:
    os.remove(name)

  return 0


if __name__ =="__main__":
  sys.exit(main())
